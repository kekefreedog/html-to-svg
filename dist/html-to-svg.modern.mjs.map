{"version":3,"file":"html-to-svg.modern.mjs","sources":["../src/utils/dom-walk.js","../src/utils/dom-get-zindex.js","../src/utils/range-get-client-rects.js","../src/utils/dom-render-svg.js","../src/renderers/canvas.js","../src/renderers/div.js","../src/renderers/svg.js","../src/renderers/text.js","../src/renderers/image.js","../src/index.js"],"sourcesContent":["async function walk (element, callback, { sort = () => 1 } = {}) {\n  if (!await callback(element)) return\n\n  for (const child of Array.from(element.children).sort(sort)) {\n    await walk(child, callback, { sort })\n  }\n}\n\nexport default walk\n","export default el => {\n  const zindex = window.getComputedStyle(el).getPropertyValue('z-index')\n  return zindex === 'auto' ? 0 : parseInt(zindex ?? 0)\n}\n","/* global DocumentFragment */\n\n// Return Range.clientRects with their corresponding DocumentFragment\nexport default function (node, text = node.innerText || node.textContent) {\n  const range = document.createRange()\n\n  const rects = []\n  for (let i = 0; i < node.length; i++) {\n    range.setStart(node, 0)\n    range.setEnd(node, (i + 1))\n\n    const clientRects = range.getClientRects()\n\n    const index = clientRects.length - 1\n    rects[index] = rects[index] ?? { text: '' }\n    rects[index].rect = clientRects[index]\n    rects[index].text += text.charAt(i)\n  }\n\n  return rects.map(rect => {\n    rect.fragment = new DocumentFragment()\n    rect.fragment.textContent = rect.text\n    return rect\n  })\n}\n","export default function (name, props = {}, parent) {\n  const NS = 'http://www.w3.org/2000/svg'\n\n  const element = document.createElementNS(NS, name)\n  if (name === 'svg') element.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', NS)\n  for (const key in props) {\n    if (props[key] === null || props[key] === undefined) continue\n    element.setAttribute(key, props[key])\n  }\n\n  if (parent) parent.appendChild(element)\n  return element\n}\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => $('image', {\n  x,\n  y,\n  width,\n  height,\n  href: element.toDataURL('image/png')\n})\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => {\n  if (!width || !height) return\n\n  // TODO background-image\n  // TODO border\n  const backgroundColor = style.getPropertyValue('background-color')\n\n  // Skip visually empty blocks\n  if (!backgroundColor || backgroundColor === 'none' || backgroundColor === 'transparent') return\n  if (backgroundColor.startsWith('rgba')) {\n    const rgba = backgroundColor.match(/[\\d.]+/g)\n    if (rgba[3] === '0') return\n  }\n\n  return $('rect', {\n    x,\n    y,\n    width,\n    height,\n    fill: backgroundColor,\n    rx: parseInt(style.getPropertyValue('border-radius')) || null\n  })\n}\n","/* global FileReader, XMLSerializer, btoa, XMLHttpRequest */\nimport $ from '../utils/dom-render-svg'\n\nexport default ({ cache }) => async (element, { x, y, width, height, style }, {\n  rasterizeNestedSVG = true\n} = {}) => {\n  // Convert all image to dataURL to maximizime compatibility\n  for (const image of element.querySelectorAll('image[href]')) {\n    const src = image.getAttribute('href')\n\n    if (!cache.has(src)) {\n      // Fetch blob from image src\n      const blob = await new Promise(resolve => {\n        const request = new XMLHttpRequest()\n        request.open('GET', src, true)\n        request.responseType = 'blob'\n        request.onload = () => resolve(request.response)\n        request.send()\n      })\n\n      // Convert blob to dataURL using the FileReader API\n      const dataURL = await new Promise(resolve => {\n        const reader = new FileReader()\n        reader.onload = e => resolve(e.target.result)\n        reader.readAsDataURL(blob)\n      })\n\n      // Cache dataURL\n      cache.set(src, dataURL)\n    }\n\n    image.setAttribute('href', cache.get(src))\n  }\n\n  return rasterizeNestedSVG\n    ? $('image', {\n      x,\n      y,\n      width,\n      height,\n      href: 'data:image/svg+xml;base64,' + btoa(new XMLSerializer().serializeToString(element))\n    })\n    : (() => {\n        const svg = $('svg', {\n          x,\n          y,\n          width,\n          height,\n          viewbox: `0 0 ${width} ${height}`\n        })\n\n        svg.innerHTML = element.innerHTML\n        return svg\n      })()\n}\n","// TODO text-decoration\n\nimport $ from '../utils/dom-render-svg'\n\nconst matchFont = s => ({ family, style = 'normal', weight = '400' } = {}) =>\n  family === (s.getPropertyValue('font-family') ?? '').replace(/['\"]/g, '') &&\n    style === (s.getPropertyValue('font-style') ?? 'normal') &&\n    weight === (s.getPropertyValue('font-weight') ?? '400')\n\nexport default ({\n  debug,\n  fonts\n}) => async (string, { x, y, width, height, style }) => {\n  if (!string) return\n\n  const g = $('g')\n\n  // Find font\n  const font = fonts.find(matchFont(style))\n  if (!font) throw new Error(`Cannot find font '${style.getPropertyValue('font-family')} ${style.getPropertyValue('font-style')} ${style.getPropertyValue('font-weight')}'`)\n\n  // Extract font metrics\n  const { unitsPerEm } = font.opentype\n  const ascender = font.opentype.tables.hhea.ascender\n  const descender = font.opentype.tables.hhea.descender\n\n  // Extract CSS props\n  const letterSpacing = style.getPropertyValue('letter-spacing')\n  const fontSize = parseFloat(style.getPropertyValue('font-size'))\n\n  // Compute metrics\n  const lineBox = (ascender - descender) / unitsPerEm\n  const leading = (fontSize * lineBox) - Math.abs(descender / unitsPerEm) * fontSize\n\n  // Render various metrics for debug\n  line('start', 0, { orientation: 'vertical', stroke: 'red' })\n  line('end', width, { orientation: 'vertical', stroke: 'red' })\n  line('leading', leading, { stroke: '#4b96ff' })\n\n  if (letterSpacing !== 'normal') {\n    // Render letter by letter in case of non-default letter-spacing\n    for (const c of string) {\n      $('path', {\n        d: font.opentype.getPath(c, x, y + leading, fontSize).toPathData(3),\n        fill: style.getPropertyValue('color')\n      }, g)\n      x += font.opentype.getAdvanceWidth(c, fontSize) + parseFloat(letterSpacing)\n    }\n  } else {\n    // Render string\n    $('path', {\n      d: font.opentype.getPath(string, x, y + leading, fontSize, {\n        features: {\n          // TODO extract from CSS props\n          liga: true,\n          rlig: true\n        }\n      }).toPathData(3),\n      fill: style.getPropertyValue('color')\n    }, g)\n  }\n\n  return g\n\n  function line (title, v, { orientation = 'horizontal', stroke = 'black' } = {}) {\n    return debug && $('line', {\n      title,\n      'data-value': v,\n      x1: orientation === 'horizontal' ? x : x + v,\n      x2: orientation === 'horizontal' ? x + width : x + v,\n      y1: orientation === 'horizontal' ? y + v : y,\n      y2: orientation === 'horizontal' ? y + v : y + height,\n      stroke,\n      class: 'debug'\n    }, g)\n  }\n}\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => {\n  if (!width || !height) return\n  if (!element.src) return\n\n  return $('image', {\n    x,\n    y,\n    width,\n    height,\n    href: element.src\n  })\n}\n","/* global Node */\nimport Opentype from 'opentype.js'\nimport walk from './utils/dom-walk'\nimport getZIndex from './utils/dom-get-zindex'\nimport getClientRects from './utils/range-get-client-rects'\n\nimport $ from './utils/dom-render-svg'\nimport * as RENDERERS from './renderers'\n\nexport default function ({\n  debug = false,\n  ignore = '',\n  fonts = []\n} = {}) {\n  const cache = new Map()\n\n  // Init curried renderers\n  const renderers = {}\n  for (const k in RENDERERS) {\n    renderers[k] = RENDERERS[k]({ debug, fonts, cache })\n  }\n\n  return {\n    get cache () { return cache },\n\n    // Preload all fonts before resolving\n    preload: async function () {\n      for (const font of fonts) {\n        if (font.opentype) continue\n        font.opentype = await new Promise(resolve => {\n          Opentype.load(font.url, (error, font) => {\n            if (error) throw error\n            resolve(font)\n          })\n        })\n      }\n    },\n\n    // Clear cache and delete all resources\n    destroy: function () {\n      cache.clear()\n      for (const font of fonts) delete font.opentype\n    },\n\n    // Render the HTML container as a shadow SVG\n    render: async function (container, options = {}) {\n      const viewBox = container.getBoundingClientRect()\n\n      // Create the SVG container\n      const svg = $('svg', {\n        viewBox: `0 0 ${viewBox.width} ${viewBox.height}`,\n        width: viewBox.width,\n        height: viewBox.height,\n        preserveAspectRatio: 'none'\n      })\n\n      // Set the parent to the current SVG.\n      // This parent will change during the walk\n      let parent = svg\n\n      // Render every children\n      await walk(container, async element => {\n        if (ignore && element !== container && element.matches(ignore)) return\n\n        // TODO opacity\n        const style = window.getComputedStyle(element)\n        const { x, y, width, height } = element.getBoundingClientRect()\n\n        // Handle CSS clip-path property\n        const clipPathValue = style.getPropertyValue('clip-path')\n        if (clipPathValue !== 'none') {\n          parent = $('g', null, svg)\n          // WARNING: CSS clip-path implementation is not done yet on arnaudjuracek/svg-to-pdf\n          parent.setAttribute('style', `clip-path: ${clipPathValue}`)\n        }\n\n        // Render element\n        const render = renderers[element.tagName] ?? renderers.div\n        const rendered = await render(element, {\n          x: x - viewBox.x,\n          y: y - viewBox.y,\n          width,\n          height,\n          style\n        }, options)\n\n        if (rendered) parent.appendChild(rendered)\n\n        // Render text nodes inside the element\n        if (element.innerText) {\n          for (const node of element.childNodes) {\n            if (node.nodeType !== Node.TEXT_NODE) continue\n            if (!node.textContent.length) continue\n\n            // Text interface does not provide a .innerText method, which would be\n            // more appropriate than textContent as it skips non-rendered whitespaces\n            // Splitting white-space leading Text trick the browser to recompute\n            // the layout itself, dealing with implicit space between adjacent nodes\n            if (/^\\s/.test(node.textContent)) {\n              node.splitText(1)\n              continue\n            }\n\n            for (const { rect, fragment } of getClientRects(node)) {\n              try {\n                const text = await renderers.text(fragment.textContent.trimEnd(), {\n                  x: rect.x - viewBox.x,\n                  y: rect.y - viewBox.y,\n                  width: rect.width,\n                  height: rect.height,\n                  style\n                }, options)\n                if (text) parent.appendChild(text)\n              } catch (error) {\n                // TODO[improve] error handling\n                console.warn(new Error(`Rendering failed for the following text: '${fragment.textContent}'`, { cause: error }))\n                console.warn(error)\n              }\n            }\n          }\n        }\n\n        // Continue walking\n        return true\n      }, {\n        sort: (a, b) => {\n          a.zIndex = a.zIndex ?? getZIndex(a)\n          b.zIndex = b.zIndex ?? getZIndex(b)\n          return a.zIndex - b.zIndex\n        }\n      })\n\n      return svg\n    }\n  }\n}\n"],"names":["async","walk","element","callback","sort","child","Array","from","children","getZIndex","el","zindex","window","getComputedStyle","getPropertyValue","parseInt","node","text","innerText","textContent","range","document","createRange","rects","i","length","_rects$index","setStart","setEnd","clientRects","getClientRects","index","rect","charAt","map","fragment","DocumentFragment","$","name","props","parent","NS","createElementNS","setAttributeNS","key","setAttribute","appendChild","div","x","y","width","height","style","backgroundColor","startsWith","match","fill","rx","svg","cache","rasterizeNestedSVG","image","querySelectorAll","src","getAttribute","has","blob","Promise","resolve","request","XMLHttpRequest","open","responseType","onload","response","send","dataURL","reader","FileReader","e","target","result","readAsDataURL","set","get","href","btoa","XMLSerializer","serializeToString","viewbox","innerHTML","debug","fonts","string","g","font","find","s","family","weight","_s$getPropertyValue","_s$getPropertyValue2","_s$getPropertyValue3","replace","Error","unitsPerEm","opentype","ascender","tables","hhea","descender","letterSpacing","fontSize","parseFloat","leading","Math","abs","line","orientation","stroke","c","d","getPath","toPathData","getAdvanceWidth","features","liga","rlig","title","v","x1","x2","y1","y2","class","toDataURL","ignore","Map","renderers","k","RENDERERS","preload","Opentype","load","url","error","destroy","clear","render","container","options","viewBox","getBoundingClientRect","preserveAspectRatio","_renderers$element$ta","matches","clipPathValue","tagName","rendered","childNodes","nodeType","Node","TEXT_NODE","test","splitText","trimEnd","console","warn","cause","a","b","_a$zIndex","_b$zIndex","zIndex"],"mappings":"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"}