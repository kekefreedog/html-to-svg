{"version":3,"file":"html-to-svg.modern.mjs","sources":["../src/utils/dom-walk.js","../src/utils/range-get-client-rects.js","../src/utils/dom-render-svg.js","../src/renderers/canvas.js","../src/renderers/div.js","../src/renderers/svg.js","../src/renderers/text.js","../src/renderers/image.js","../src/index.js"],"sourcesContent":["async function walk (element, callback) {\n  if (!await callback(element)) return\n\n  for (const child of element.children) {\n    await walk(child, callback)\n  }\n}\n\nexport default walk\n","/* global DocumentFragment */\n\n// Return Range.clientRects with their corresponding DocumentFragment\nexport default function (node, text = node.innerText || node.textContent) {\n  const range = document.createRange()\n\n  const rects = []\n  for (let i = 0; i < node.length; i++) {\n    range.setStart(node, 0)\n    range.setEnd(node, (i + 1))\n\n    const clientRects = range.getClientRects()\n\n    const index = clientRects.length - 1\n    rects[index] = rects[index] ?? { text: '' }\n    rects[index].rect = clientRects[index]\n    rects[index].text += text.charAt(i)\n  }\n\n  return rects.map(rect => {\n    rect.fragment = new DocumentFragment()\n    rect.fragment.textContent = rect.text\n    return rect\n  })\n}\n","export default function (name, props = {}, parent) {\n  const NS = 'http://www.w3.org/2000/svg'\n\n  const element = document.createElementNS(NS, name)\n  if (name === 'svg') element.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', NS)\n  for (const key in props) {\n    if (props[key] === null || props[key] === undefined) continue\n    element.setAttribute(key, props[key])\n  }\n\n  if (parent) parent.appendChild(element)\n  return element\n}\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => $('image', {\n  x,\n  y,\n  width,\n  height,\n  href: element.toDataURL('image/png')\n})\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => {\n  if (!width || !height) return\n\n  // TODO background-image\n  // TODO border\n  const backgroundColor = style.getPropertyValue('background-color')\n\n  // Skip visually empty blocks\n  if (!backgroundColor || backgroundColor === 'none' || backgroundColor === 'transparent') return\n  if (backgroundColor.startsWith('rgba')) {\n    const rgba = backgroundColor.match(/[\\d.]+/g)\n    if (rgba[3] === '0') return\n  }\n\n  return $('rect', {\n    x,\n    y,\n    width,\n    height,\n    fill: backgroundColor,\n    rx: parseInt(style.getPropertyValue('border-radius')) || null\n  })\n}\n","/* global XMLSerializer, btoa */\nimport $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => $('image', {\n  x,\n  y,\n  width,\n  height,\n  href: 'data:image/svg+xml;base64,' + btoa(new XMLSerializer().serializeToString(element))\n})\n","// TODO text-decoration\n\nimport $ from '../utils/dom-render-svg'\n\nconst matchFont = s => ({ family, style = 'normal', weight = '400' } = {}) =>\n  family === (s.getPropertyValue('font-family') ?? '').replace(/['\"]/g, '') &&\n    style === (s.getPropertyValue('font-style') ?? 'normal') &&\n    weight === (s.getPropertyValue('font-weight') ?? '400')\n\nexport default ({\n  debug,\n  fonts\n}) => async (string, { x, y, width, height, style }) => {\n  if (!string) return\n\n  const g = $('g')\n\n  // Find font\n  const font = fonts.find(matchFont(style))\n  if (!font) throw new Error(`Cannot find font '${style.getPropertyValue('font-family')} ${style.getPropertyValue('font-style')} ${style.getPropertyValue('font-weight')}'`)\n\n  // Extract font metrics\n  const { unitsPerEm } = font.opentype\n  const ascender = font.opentype.tables.hhea.ascender\n  const descender = font.opentype.tables.hhea.descender\n\n  // Extract CSS props\n  const letterSpacing = style.getPropertyValue('letter-spacing')\n  const fontSize = parseFloat(style.getPropertyValue('font-size'))\n\n  // Compute metrics\n  const lineBox = (ascender - descender) / unitsPerEm\n  const leading = (fontSize * lineBox) - Math.abs(descender / unitsPerEm) * fontSize\n\n  // Render various metrics for debug\n  line('start', 0, { orientation: 'vertical', stroke: 'red' })\n  line('end', width, { orientation: 'vertical', stroke: 'red' })\n  line('leading', leading, { stroke: '#4b96ff' })\n\n  if (letterSpacing !== 'normal') {\n    // Render letter by letter in case of non-default letter-spacing\n    for (const c of string) {\n      $('path', {\n        d: font.opentype.getPath(c, x, y + leading, fontSize).toPathData(3),\n        fill: style.getPropertyValue('color')\n      }, g)\n      x += font.opentype.getAdvanceWidth(c, fontSize) + parseFloat(letterSpacing)\n    }\n  } else {\n    // Render string\n    $('path', {\n      d: font.opentype.getPath(string, x, y + leading, fontSize, {\n        features: {\n          // TODO extract from CSS props\n          liga: true,\n          rlig: true\n        }\n      }).toPathData(3),\n      fill: style.getPropertyValue('color')\n    }, g)\n  }\n\n  return g\n\n  function line (title, v, { orientation = 'horizontal', stroke = 'black' } = {}) {\n    return debug && $('line', {\n      title,\n      'data-value': v,\n      x1: orientation === 'horizontal' ? x : x + v,\n      x2: orientation === 'horizontal' ? x + width : x + v,\n      y1: orientation === 'horizontal' ? y + v : y,\n      y2: orientation === 'horizontal' ? y + v : y + height,\n      stroke,\n      class: 'debug'\n    }, g)\n  }\n}\n","import $ from '../utils/dom-render-svg'\n\nexport default ({\n  debug,\n  fonts\n}) => async (element, { x, y, width, height, style }) => {\n  if (!width || !height) return\n  if (!element.src) return\n\n  return $('image', {\n    x,\n    y,\n    width,\n    height,\n    href: element.src\n  })\n}\n","/* global Node */\nimport Opentype from 'opentype.js'\nimport walk from './utils/dom-walk'\nimport getClientRects from './utils/range-get-client-rects'\n\nimport $ from './utils/dom-render-svg'\nimport * as RENDERERS from './renderers'\n\nexport default function (container = document.body, {\n  debug = false,\n  ignore = '',\n  fonts = []\n} = {}) {\n  // Init curried renderers\n  const renderers = {}\n  for (const k in RENDERERS) {\n    renderers[k] = RENDERERS[k]({ debug, fonts })\n  }\n\n  return {\n    // Preload all fonts before resolving\n    preload: async function () {\n      for (const font of fonts) {\n        if (font.opentype) continue\n        font.opentype = await new Promise(resolve => {\n          Opentype.load(font.url, (error, font) => {\n            if (error) throw error\n            resolve(font)\n          })\n        })\n      }\n    },\n\n    // Clear cache and delete all resources\n    flush: function () {\n      for (const font of fonts) delete font.opentype\n    },\n\n    // Render the HTML container as a shadow SVG\n    compute: async function () {\n      const viewBox = container.getBoundingClientRect()\n\n      // Create the SVG container\n      const svg = $('svg', {\n        viewBox: `0 0 ${viewBox.width} ${viewBox.height}`,\n        width: viewBox.width,\n        height: viewBox.height,\n        preserveAspectRatio: 'none'\n      })\n\n      // Set the parent to the current SVG.\n      // This parent will change during the walk\n      let parent = svg\n\n      // Render every children\n      await walk(container, async element => {\n        if (ignore && element !== container && element.matches(ignore)) return\n\n        // TODO opacity\n        const style = window.getComputedStyle(element)\n        const { x, y, width, height } = element.getBoundingClientRect()\n\n        // Handle CSS clip-path property\n        const clipPathValue = style.getPropertyValue('clip-path')\n        if (clipPathValue !== 'none') {\n          parent = $('g', null, svg)\n          // WARNING: CSS clip-path implementation is not done yet on arnaudjuracek/svg-to-pdf\n          parent.setAttribute('style', `clip-path: ${clipPathValue}`)\n        }\n\n        // Render element\n        const render = renderers[element.tagName] ?? renderers.div\n        const rendered = await render(element, {\n          x: x - viewBox.x,\n          y: y - viewBox.y,\n          width,\n          height,\n          style\n        })\n\n        if (rendered) parent.appendChild(rendered)\n\n        // Render text nodes inside the element\n        if (element.innerText) {\n          for (const node of element.childNodes) {\n            if (node.nodeType !== Node.TEXT_NODE) continue\n            if (!node.textContent.length) continue\n\n            // Text interface does not provide a .innerText method, which would be\n            // more appropriate than textContent as it skips non-rendered whitespaces\n            // Splitting white-space leading Text trick the browser to recompute\n            // the layout itself, dealing with implicit space between adjacent nodes\n            if (/^\\s/.test(node.textContent)) {\n              node.splitText(1)\n              continue\n            }\n\n            for (const { rect, fragment } of getClientRects(node)) {\n              try {\n                const text = await renderers.text(fragment.textContent.trimEnd(), {\n                  x: rect.x - viewBox.x,\n                  y: rect.y - viewBox.y,\n                  width: rect.width,\n                  height: rect.height,\n                  style\n                })\n                if (text) parent.appendChild(text)\n              } catch (error) {\n                // TODO[improve] error handling\n                console.warn(new Error(`Rendering failed for the following text: '${fragment.textContent}'`, { cause: error }))\n                console.warn(error)\n              }\n            }\n          }\n        }\n\n        // Continue walking\n        return true\n      })\n\n      return svg\n    }\n  }\n}\n"],"names":["async","walk","element","callback","child","children","node","text","innerText","textContent","range","document","createRange","rects","i","length","_rects$index","setStart","setEnd","clientRects","getClientRects","index","rect","charAt","map","fragment","DocumentFragment","$","name","props","parent","NS","createElementNS","setAttributeNS","key","setAttribute","appendChild","div","x","y","width","height","style","backgroundColor","getPropertyValue","startsWith","match","fill","rx","parseInt","svg","href","btoa","XMLSerializer","serializeToString","debug","fonts","string","g","font","find","s","family","weight","_s$getPropertyValue","_s$getPropertyValue2","_s$getPropertyValue3","replace","Error","unitsPerEm","opentype","ascender","tables","hhea","descender","letterSpacing","fontSize","parseFloat","leading","Math","abs","line","orientation","stroke","c","d","getPath","toPathData","getAdvanceWidth","features","liga","rlig","title","v","x1","x2","y1","y2","class","toDataURL","src","container","body","ignore","renderers","k","RENDERERS","preload","Promise","resolve","Opentype","load","url","error","flush","compute","viewBox","getBoundingClientRect","preserveAspectRatio","_renderers$element$ta","matches","window","getComputedStyle","clipPathValue","render","tagName","rendered","childNodes","nodeType","Node","TEXT_NODE","test","splitText","trimEnd","console","warn","cause"],"mappings":"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"}